{
    "pipes": [],
    "interfaces": [
        {
            "name": "ConfirmationDialogConfig",
            "id": "interface-ConfirmationDialogConfig-4dcb5e9fc809ecd06dfe9e06f0c8cd99603f79ed99b4606116d06a3fc1d5f7733a3acd80c98823ce9bcd178cf42e7630886212174f02f6c65b5d1e67e04b52af",
            "file": "projects/extra-clarity/src/lib/modules/dialog/models/confirmation-dialog-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DialogButton} from \"./dialog-button.model\";\nimport {Size} from \"../../../types/size.type\";\n\nexport interface ConfirmationDialogConfig {\n  title: string;\n  message: string;\n  acceptBtn?: DialogButton;\n  rejectBtn?: DialogButton;\n  rejectBtnHidden?: boolean;\n  showCloseButton?: boolean;\n  size?: Size;\n}\n",
            "properties": [
                {
                    "name": "acceptBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogButton",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "rejectBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogButton",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rejectBtnHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "showCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogButton",
            "id": "interface-DialogButton-31a4018efc2df1685af1ef29afcb51e367a6b0db80b50b3e02b04b54eee89aaecee1506c0aa3f7995f6a9c0a24b0d9fbc7c201a34e84a3ff940aec02d1654178",
            "file": "projects/extra-clarity/src/lib/modules/dialog/models/dialog-button.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DialogButton {\n  label: string;\n  icon?: string;\n  classes?: string;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-b1f3ad93035100d56a209742826be054602c57ac54d73862276c472dfb020bbf32dba7e55043cf296530435f359570829c64d3fea22836432c3d81bf5d06b51a",
            "file": "projects/extra-clarity/src/lib/modules/dialog/services/dialog.service.ts",
            "properties": [
                {
                    "name": "confirmationSubject$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<ConfirmationType>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "attachView",
                    "args": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConfirmationDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConfirmationType>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConfirmationDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createChildComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createComponent",
                    "args": [
                        {
                            "name": "child",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<ClrModal>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "value",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ApplicationRef, ComponentRef, createComponent, EnvironmentInjector, Injectable, Type} from '@angular/core';\nimport {ConfirmationDialogComponent} from \"../containers/confirmation-dialog/confirmation-dialog.component\";\nimport {ConfirmationDialogConfig} from \"../models\";\nimport {Observable, Subject, take} from \"rxjs\";\nimport {ConfirmationType} from \"../enums\";\nimport {ClrModal} from \"@clr/angular\";\n\n@Injectable()\nexport class DialogService {\n  private confirmationSubject$: Subject<ConfirmationType>;\n\n  constructor(\n    private readonly applicationRef: ApplicationRef,\n    private readonly injector: EnvironmentInjector,\n  ) {}\n\n  public confirm(config: ConfirmationDialogConfig): Observable<ConfirmationType> {\n    const childComponentRef = this.createChildComponent(ConfirmationDialogComponent);\n    const componentRef = this.createComponent(childComponentRef);\n\n    componentRef.setInput('config', config);\n\n    this.attachView(componentRef);\n\n    // this.confirmationSubject$ = new Subject<ConfirmationType>();\n\n    // componentRef.instance.close.subscribe((type) => this.onClose(type));\n\n    return this.confirmationSubject$.asObservable();\n  }\n\n  public open<T>(component: Type<T>): void {\n    // const componentRef = this.createComponent(component);\n  }\n\n  private createComponent<T>(child: ComponentRef<T>): ComponentRef<ClrModal> {\n    return createComponent(ClrModal, {\n      environmentInjector: this.injector,\n      projectableNodes: [child.location.nativeElement],\n    });\n  }\n\n  private createChildComponent<T>(component: Type<T>): ComponentRef<T> {\n    return createComponent(component, { environmentInjector: this.injector });\n  }\n\n  private attachView<T>(componentRef: ComponentRef<T>): void {\n    document.body.appendChild(componentRef.location.nativeElement);\n    this.applicationRef.attachView(componentRef.hostView);\n  }\n\n  private onClose(value: ConfirmationType): void {\n    this.confirmationSubject$.next(value);\n    this.confirmationSubject$.complete();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AutoRefreshComponent",
            "id": "component-AutoRefreshComponent-c500412ee86e34b9f419c70d4db5d450c044bbd589bfdd10473f0f084dd35e4a6e620c05e69baa34e66a98c55dac88b721897b3520faee77585458e801e60e06",
            "file": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-auto-refresh",
            "styleUrls": [
                "./auto-refresh.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./auto-refresh.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "period",
                    "defaultValue": "DEFAULT_PERIOD_SEC",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "refreshing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "refresh",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "timer$",
                    "defaultValue": "timer(0, 1000)\n    .pipe(\n      map((seconds) => this.period - seconds),\n      take(this.period),\n      finalize(() => this.refresh.emit()),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "toggleControl",
                    "defaultValue": "new FormControl<boolean>(!this.disabled, { nonNullable: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {finalize, map, take, timer} from \"rxjs\";\nimport {FormControl} from \"@angular/forms\";\n\nconst DEFAULT_PERIOD_SEC = 60;\n\n@Component({\n  selector: 'lib-auto-refresh',\n  templateUrl: './auto-refresh.component.html',\n  styleUrls: ['./auto-refresh.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutoRefreshComponent {\n  @Input() public period: number = DEFAULT_PERIOD_SEC;\n  @Input() public refreshing: boolean;\n  @Input() public disabled: boolean = false;\n\n  @Output() refresh = new EventEmitter<void>();\n  @Output() toggle = new EventEmitter<boolean>();\n\n  public readonly toggleControl = new FormControl<boolean>(!this.disabled, { nonNullable: true });\n\n  public readonly timer$ = timer(0, 1000)\n    .pipe(\n      map((seconds) => this.period - seconds),\n      take(this.period),\n      finalize(() => this.refresh.emit()),\n    );\n\n  public onToggle(): void {\n    this.toggle.emit(this.toggleControl.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auto-refresh.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<clr-toggle-container>\n  <clr-toggle-wrapper>\n    <input\n      type=\"checkbox\"\n      clrToggle\n      [formControl]=\"toggleControl\"\n      (change)=\"onToggle()\"\n    >\n    <label class=\"p5 text-label\">\n      <ng-container *ngIf=\"!toggleControl.value; else timer\">\n        Auto refresh disabled\n      </ng-container>\n\n      <ng-template #timer>\n        <ng-container *ngIf=\"!refreshing && timer$ | async as timer; else refresh\">\n          Auto refresh in {{ timer }} sec\n        </ng-container>\n\n        <ng-template #refresh>\n          Refreshing...\n        </ng-template>\n      </ng-template>\n    </label>\n  </clr-toggle-wrapper>\n</clr-toggle-container>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-b4b24a38e2680853683ff4c9b89f0af0939a839a0aadeeb5352e6954d34aba9955a32231265ae4a0d5ca28eb8e9fd62989c9d283b674463cae3860907f057e48",
            "file": "stories/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DialogService"
                }
            ],
            "selector": "storybook-button",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  (click)=\"onOpen()\"\n  class=\"btn btn-primary\"\n  type=\"button\"\n>\n  Open confirmation dialog\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ConfirmationDialogConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getConfirmationMessage",
                    "args": [
                        {
                            "name": "type",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {\n  ConfirmationDialogConfig,\n  ConfirmationType, DialogService\n} from \"../../projects/extra-clarity/src\";\n\n@Component({\n  selector: 'storybook-button',\n  template: `\n    <button\n      (click)=\"onOpen()\"\n      class=\"btn btn-primary\"\n      type=\"button\"\n    >\n      Open confirmation dialog\n    </button>\n  `,\n  providers: [DialogService],\n})\nexport class ConfirmationDialogComponent {\n\n  @Input() public config: ConfirmationDialogConfig;\n\n  constructor(\n    private readonly dialogService: DialogService,\n  ) {\n  }\n\n  onOpen(): void {\n    this.dialogService.confirm({\n      title: 'Test',\n      message: 'Test message',\n    }).subscribe((value) => alert(this.getConfirmationMessage(value)));\n  }\n\n  private getConfirmationMessage(type: ConfirmationType): string {\n    switch (type) {\n      case ConfirmationType.Accept: return 'Accepted';\n      case ConfirmationType.Reject: return 'Rejected';\n      case ConfirmationType.Cancel: return 'Canceled';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-fbfebec8f378e0bc12a738130872c935b21029cff57235b03283baf00f605fee68ea02b5644261745614aeb659e9045d49381bf11f851358b925383fc1740a6f-1",
            "file": "projects/extra-clarity/src/lib/modules/dialog/containers/confirmation-dialog/confirmation-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ConfirmationDialogConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<ConfirmationType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAccept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "type",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ConfirmationDialogConfig} from \"../../models\";\nimport {ConfirmationType} from \"../../enums\";\n\n@Component({\n  selector: 'lib-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmationDialogComponent {\n  @Input() public config: ConfirmationDialogConfig;\n\n  @Output() public close = new EventEmitter<ConfirmationType>();\n\n  public onCancel(): void {\n    this.onClose(ConfirmationType.Cancel);\n  }\n\n  public onReject(): void {\n    this.onClose(ConfirmationType.Reject);\n  }\n\n  public onAccept(): void {\n    this.onClose(ConfirmationType.Accept);\n  }\n\n  private onClose(type: ConfirmationType): void {\n    this.close.emit(type);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfirmationDialogComponent-1",
            "templateData": "<clr-modal [clrModalOpen]=\"true\" [clrModalClosable]=\"config.closable\" (close)=\"onCancel()\">\n  <h3 class=\"modal-title\">{{ config.title }}</h3>\n\n  <div class=\"modal-body\">\n    <p>{{ config.message }}</p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      class=\"btn btn-outline\"\n      (click)=\"onReject()\"\n    >\n      {{ config.rejectBtn?.label || 'Cancel' }}\n    </button>\n\n    <button\n      type=\"button\"\n      class=\"btn btn-primary\"\n      (click)=\"onAccept()\"\n    >\n      {{ config.acceptBtn?.label || 'Ok' }}\n    </button>\n  </div>\n</clr-modal>\n"
        },
        {
            "name": "ConfirmationDialogStory",
            "id": "component-ConfirmationDialogStory-25617eba79d56c8cb4576ae063082da9a5d64f27cf13946bf64e1a86bacac10c4742acfeacfbe5b16e9a272586114b36ae096ca192f63f122c11f075bae37ed5",
            "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-story",
            "styleUrls": [],
            "styles": [],
            "template": "  123\n<button class=\"btn btn-primary\" (click)=\"openDialog()\">Open Modal</button>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acceptBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "DialogButton",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rejectBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "DialogButton",
                    "decorators": []
                },
                {
                    "name": "rejectBtnHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Meta } from '@storybook/angular/types-6-0';\nimport {moduleMetadata} from \"@storybook/angular\";\nimport {\n  ConfirmationDialogModule,\n  ConfirmationDialogComponent,\n  DialogService\n} from \"../../projects/extra-clarity/src\";\nimport {Component, Input} from \"@angular/core\";\nimport {\n  DialogButton\n} from \"../../projects/extra-clarity/src/lib/modules/dialog/models/dialog-button.model\";\nimport {Size} from \"../../projects/extra-clarity/src/lib/types/size.type\";\n\n@Component({\n  selector: \"app-dialog-story\",\n  template: `\n    123\n\t\t<button class=\"btn btn-primary\" (click)=\"openDialog()\">Open Modal</button>\n\t`\n})\nclass ConfirmationDialogStory {\n  @Input() title: string;\n  @Input() message: string;\n  @Input() acceptBtn: DialogButton;\n  @Input() rejectBtn: DialogButton;\n  @Input() rejectBtnHidden: boolean;\n  @Input() closable: boolean;\n  @Input() size: Size;\n  @Input() showCloseButton: boolean;\n\n  constructor(private readonly dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.confirm({\n      title: this.title,\n      message: this.message,\n      acceptBtn: this.acceptBtn,\n      rejectBtn: this.rejectBtn,\n      rejectBtnHidden: this.rejectBtnHidden,\n      size: this.size,\n      showCloseButton: this.showCloseButton\n    });\n  }\n}\n\n// More on default export: https://storybook.js.org/docs/angular/writing-stories/introduction#default-export\nexport default {\n  title: 'Confirmation dialog',\n  component: ConfirmationDialogStory,\n  decorators: [\n    moduleMetadata({\n      imports: [ConfirmationDialogModule],\n    }),\n  ],\n} as Meta;\n\n// More on component templates: https://storybook.js.org/docs/angular/writing-stories/introduction#using-args\nconst Template = ({  }) => ({\n  props: {\n\n  },\n  component: ConfirmationDialogComponent\n});\n\nexport const Primary = Template.bind({});\n// More on args: https://storybook.js.org/docs/angular/writing-stories/args\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EnumeratedValueFilterComponent",
            "id": "component-EnumeratedValueFilterComponent-bfc8edc5344470a08aade4e4fc2ab448046dc7aafcd4d868feaae92a6ff76317989460d4eceaccc56c8943be03818c5e1de1eec8ab90a11e2d4353eaa011c371",
            "file": "projects/datagrid-filters/src/lib/modules/enumerated-value/components/enumerated-value-filter/enumerated-value-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enumerated-value-filter",
            "styleUrls": [],
            "styles": [
                ":host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }"
            ],
            "templateUrl": [
                "./enumerated-value-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "debounceValue",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "exclusive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "propertyDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#changes",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#exclusive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accepts",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, OnDestroy } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { ClrDatagridFilterInterface } from '@clr/angular';\nimport { debounceTime, Subject, takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-enumerated-value-filter',\n  templateUrl: './enumerated-value-filter.component.html',\n  styles: [\n    `:host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }`\n  ]\n})\nexport class EnumeratedValueFilterComponent<T> implements ClrDatagridFilterInterface<T>, OnDestroy {\n\n  @Input() debounceValue = 300;\n  @Input() values: readonly (string | number | symbol)[] = [];\n  @Input() propertyKey?: string;\n  @Input() propertyDisplayName?: string;\n\n  #exclusive = false;\n  @Input()\n  set exclusive(value: boolean) {\n    this.#exclusive = value;\n  }\n\n  get exclusive() {\n    return this.#exclusive;\n  }\n\n  #changes: Subject<(typeof this.values)[number]> = new Subject();\n  #deleted = new EventEmitter();\n  #form: UntypedFormGroup;\n\n  constructor() {\n    this.#form = new UntypedFormGroup({\n      'input': new UntypedFormControl('')\n    });\n\n    this.#form.get('input')?.valueChanges\n      .pipe(\n        takeUntil(this.#deleted),\n        debounceTime(this.debounceValue)\n      )\n      .subscribe(value => this.#changes.next(value));\n\n  }\n\n  ngOnDestroy(): void {\n    this.#deleted.emit();\n  }\n\n  reset() {\n    this.#form.reset();\n  }\n\n  get changes() {\n    return this.#changes.asObservable();\n  }\n\n  get form() {\n    return this.#form;\n  }\n\n  get state() {\n    return {\n      property: this.propertyKey,\n      value: this.value,\n    };\n  }\n\n  get isDirty() {\n    return this.#form.dirty;\n  }\n\n  get value() {\n    return this.#form.get('input')?.value;\n  }\n\n  isActive(): boolean {\n    return !!this.propertyKey && !!this.value;\n  }\n\n  accepts(item: T): boolean {\n\n    if (!Object(item).hasOwnProperty(this.propertyKey)) {\n      return false;\n    }\n\n    const propertyValue = item[this.propertyKey as keyof typeof item];\n    if (typeof this.value !== typeof propertyValue) {\n      return false;\n    }\n\n    return propertyValue === this.value;\n\n  }\n\n  equals(other: ClrDatagridFilterInterface<T, EnumeratedValueFilterComponent<T>['state']>): boolean {\n    if (!other) {\n      return false;\n    }\n\n    return this.state?.property === other.state?.property\n      && this.state.value === other.state?.value;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "ClrDatagridFilterInterface",
                "OnDestroy"
            ],
            "accessors": {
                "exclusive": {
                    "name": "exclusive",
                    "setSignature": {
                        "name": "exclusive",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "exclusive",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "changes": {
                    "name": "changes",
                    "getSignature": {
                        "name": "changes",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                },
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            },
            "templateData": "<h3 class=\"p2 filter-title\">Filter by {{ propertyDisplayName }}</h3>\n<form [formGroup]=\"form\">\n  <clr-radio-wrapper *ngFor=\"let value of values\">\n    <input type=\"radio\" clrRadio [value]=\"value\" formControlName=\"input\" />\n    <label>{{ value.toString() | titlecase }}</label>\n  </clr-radio-wrapper>\n  <button\n    type=\"button\"\n    class=\"btn btn-icon btn-block btn-sm\"\n    (click)=\"reset()\"\n    [disabled]=\"!isDirty\"\n  >\n    <clr-icon shape=\"refresh\"></clr-icon>\n    RESET\n  </button>\n</form>\n"
        },
        {
            "name": "PartialStringFilterComponent",
            "id": "component-PartialStringFilterComponent-72d868c6476624b8ac037651b16d8c39dbb53f9627b38b0b2d65b7071b75bb14b0148c919e28b434ac5c825a481f49f37a499ba39177449a6b31502f8c70101d",
            "file": "projects/datagrid-filters/src/lib/modules/partial-string/components/partial-string-filter/partial-string-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-partial-string-filter",
            "styleUrls": [],
            "styles": [
                ":host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }",
                ":host ::ng-deep .clr-control-container {\n      width: 100%;\n    }",
                ":host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }",
                ":host ::ng-deep input {\n      width: 100%;\n    }"
            ],
            "templateUrl": [
                "./partial-string-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characterLimit",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "debounceValue",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Filter by string'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#changes",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accepts",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup\n} from '@angular/forms';\nimport {\n  ClrDatagridFilter,\n  ClrDatagridFilterInterface,\n  ClrPopoverToggleService\n} from '@clr/angular';\nimport {\n  debounceTime,\n  Subject,\n  takeUntil\n} from 'rxjs';\n\n/* TODO: Autoreset if input length less then required */\n\n@Component({\n  selector: 'app-partial-string-filter',\n  templateUrl: './partial-string-filter.component.html',\n  styles: [\n    `:host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }`,\n    `:host ::ng-deep .clr-control-container {\n      width: 100%;\n    }`,\n    `:host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }`,\n    `:host ::ng-deep input {\n      width: 100%;\n    }`\n  ]\n})\nexport class PartialStringFilterComponent<T> implements ClrDatagridFilterInterface<T>, OnInit, OnDestroy, AfterViewInit {\n\n  @Input() characterLimit = 2;\n  @Input() debounceValue = 300;\n  @Input() placeholder = 'Filter by string';\n  @Input() propertyKey?: string;\n  @Input() propertyDisplayName?: string;\n\n  @ViewChild('input') input?: ElementRef<HTMLInputElement>;\n\n  #changes = new Subject<string>();\n  #deleted = new EventEmitter();\n  #form: UntypedFormGroup;\n\n  constructor(\n    private filterContainer: ClrDatagridFilter,\n    private smartToggleService: ClrPopoverToggleService\n  ) {\n\n    this.#form = new UntypedFormGroup({\n      'input': new UntypedFormControl('')\n    });\n\n    this.#form.get('input')?.valueChanges\n      .pipe(\n        takeUntil(this.#deleted),\n        debounceTime(this.debounceValue)\n      )\n      .subscribe(value => {\n        const isValidValue = 'string' === typeof value && value.length >= this.characterLimit;\n        if (isValidValue) {\n          this.#changes.next(value);\n        }\n      });\n\n    this.filterContainer.setFilter(this);\n  }\n\n  ngOnInit(): void {\n    if ('undefined' === typeof this.propertyDisplayName) {\n      this.propertyDisplayName = this.propertyKey;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.smartToggleService.openChange\n      .pipe(takeUntil(this.#deleted))\n      .subscribe(() => {\n        if (this.input) {\n          setTimeout(() => {\n            this.input?.nativeElement.focus();\n          });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.#deleted.emit();\n  }\n\n  isActive(): boolean {\n    return !!this.value && !!this.propertyKey;\n  }\n\n  accepts(item: T): boolean {\n\n    if (!Object(item).hasOwnProperty(this.propertyKey)) {\n      return false;\n    }\n\n    const propertyValue = item[this.propertyKey as keyof typeof item];\n    if ('string' !== typeof propertyValue) {\n      return false;\n    }\n\n    const escape = (string: string) => string.replace(\n      /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n    );\n\n    const test = new RegExp(\n      escape(this.value),\n      'i'\n    );\n\n    const match = propertyValue.match(test);\n\n    return Array.isArray(match);\n\n  }\n\n  equals(other: ClrDatagridFilterInterface<T, PartialStringFilterComponent<T>['state']>): boolean {\n    if (!other) {\n      return false;\n    }\n\n    return this.state?.property === other.state?.property\n      && this.state.value === other.state?.value;\n  }\n\n  reset() {\n    this.#form.reset();\n    this.#changes.next('');\n  }\n\n  get form() {\n    return this.#form;\n  }\n\n  get changes() {\n    return this.#changes.asObservable();\n  }\n\n  get state() {\n    return {\n      property: this.propertyKey,\n      value: this.value,\n    };\n  }\n\n  get value() {\n    return this.#form.get('input')?.value as string ?? '';\n  }\n\n  get isDirty() {\n    return this.#form.dirty;\n  }\n\n  get isToShort() {\n    return this.value.length < this.characterLimit;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }\n:host ::ng-deep .clr-control-container {\n      width: 100%;\n    }\n:host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }\n:host ::ng-deep input {\n      width: 100%;\n    }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filterContainer",
                        "type": "ClrDatagridFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "smartToggleService",
                        "type": "ClrPopoverToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "filterContainer",
                        "type": "ClrDatagridFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "smartToggleService",
                        "type": "ClrPopoverToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ClrDatagridFilterInterface",
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "",
                        "returnType": "",
                        "line": 150
                    }
                },
                "changes": {
                    "name": "changes",
                    "getSignature": {
                        "name": "changes",
                        "type": "",
                        "returnType": "",
                        "line": 154
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 158
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 165
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 169
                    }
                },
                "isToShort": {
                    "name": "isToShort",
                    "getSignature": {
                        "name": "isToShort",
                        "type": "",
                        "returnType": "",
                        "line": 173
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\n  <input\n    type=\"text\"\n    autocomplete=\"off\"\n    placeholder=\"{{ placeholder }}\"\n    clrInput\n    formControlName=\"input\"\n    #input\n  />\n  <clr-control-helper *ngIf=\"isToShort\">\n    Please provide at least {{ characterLimit }} characters\n  </clr-control-helper>\n  <clr-control-helper *ngIf=\"!isToShort\">\n    Searching '{{ propertyDisplayName }}' by partial match\n  </clr-control-helper>\n  <button\n    type=\"button\"\n    class=\"btn btn-icon btn-block btn-sm\"\n    (click)=\"reset()\"\n    [disabled]=\"!isDirty\"\n  >\n    <clr-icon shape=\"refresh\"></clr-icon>\n    RESET\n  </button>\n</form>\n"
        },
        {
            "name": "ProcessingButtonComponent",
            "id": "component-ProcessingButtonComponent-233bf9821972cd902d9d703c4b5d2ebdfaf5446e41cc618f214b5656d5992618fd73212db3a3c74a13286af518856bb74768d25ed7342776cda13e1ff4080be6",
            "file": "projects/extra-clarity/src/lib/modules/processing-button/processing-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-processing-button",
            "styleUrls": [
                "./processing-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./processing-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "processing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'lib-processing-button',\n  templateUrl: './processing-button.component.html',\n  styleUrls: ['./processing-button.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProcessingButtonComponent {\n  @Input() public classes: string;\n  @Input() public disabled: boolean;\n  @Input() public processing: boolean;\n  @Input() public title: string;\n\n  loading = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./processing-button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<!--<button-->\n<!--  class=\"lodx-button {{ classes }}\"-->\n<!--  [class.btn-processing]=\"processing\"-->\n<!--  [disabled]=\"disabled || processing\"-->\n<!--  type=\"submit\"-->\n<!--&gt;-->\n<!--  <span>{{ title }}</span>-->\n<!--  <clr-spinner-->\n<!--    [clrInverse]=\"clrInverse\"-->\n<!--    [clrSmall]=\"clrSmall\"-->\n<!--    [clrMedium]=\"clrMedium\"-->\n<!--    [clrInline]=\"clrInline\"-->\n<!--  >-->\n<!--    {{text}}-->\n<!--  </clr-spinner>-->\n<!--</button>-->\n\n<button [clrLoading]=\"loading\" class=\"btn btn-primary\" (click)=\"loading = !loading\">test</button>\n"
        }
    ],
    "modules": [
        {
            "name": "AutoRefreshModule",
            "id": "module-AutoRefreshModule-2b493562b623108f7e310e52d05aca500c29d43f971491163540c3c043e6df763b10118d0fa575d3be3488dfa5aa725319193e385e23592ba8e7519b43918ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AutoRefreshComponent } from './auto-refresh.component';\nimport {ClrCheckboxModule} from \"@clr/angular\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\n@NgModule({\n  declarations: [AutoRefreshComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClrCheckboxModule,\n  ],\n  exports: [AutoRefreshComponent],\n})\nexport class AutoRefreshModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutoRefreshComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutoRefreshComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfirmationDialogModule",
            "id": "module-ConfirmationDialogModule-aad5f2ef2f39e72884c1d81919e6da08a3afb7c17c5f9d82414bcc89b3de3fc3934efd0862c6353b84951a3a1794ad36acac9def6c055dc7b6d8e4bcd5447b62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/src/lib/modules/dialog/confirmation-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmationDialogComponent } from './containers';\nimport {ClrModalModule} from \"@clr/angular\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {DialogService} from \"./services\";\n\n@NgModule({\n  declarations: [ConfirmationDialogComponent],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    ClrModalModule,\n  ],\n  providers: [DialogService],\n})\nexport class ConfirmationDialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmationDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatagridFiltersModule",
            "id": "module-DatagridFiltersModule-d0f4cbfb6e3e78ddcf3b54586e3881bc3a2a6b968d920e312af60983b32677b6a024b6a492e66abc8992d77964e080b8cf0a33677354bf3be88fdf509a93694a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/datagrid-filters.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  EnumeratedValueFilterModule,\n  PartialStringFilterModule,\n} from './modules';\n\n@NgModule({\n  exports: [\n    EnumeratedValueFilterModule,\n    PartialStringFilterModule,\n  ]\n})\nexport class DatagridFiltersModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterModule"
                        },
                        {
                            "name": "PartialStringFilterModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EnumeratedValueFilterModule",
            "id": "module-EnumeratedValueFilterModule-94685e4e48398b745c39ce0adb0decff900483b0350ad3266b02ffb81cd515372a215123147e4b1a4e0a2a569fccfcfce656f57c2d7192eabddebcd00f057cc3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/modules/enumerated-value/enumerated-value-filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { EnumeratedValueFilterComponent } from './components/enumerated-value-filter/enumerated-value-filter.component';\n\n@NgModule({\n  declarations: [\n    EnumeratedValueFilterComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClarityModule\n  ],\n  exports: [\n    EnumeratedValueFilterComponent\n  ]\n})\nexport class EnumeratedValueFilterModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExtraClarityLibModule",
            "id": "module-ExtraClarityLibModule-04aea02fca5f8b015a27e63665b528dbe9d4f198fd3b7c7c6eeda464f5af7c2a5c1e30da5c7f49f68ffe57a93001ec2af96af807aa36331fc34ff3efb7e0b072",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/src/lib/extra-clarity.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {ConfirmationDialogModule} from \"./modules/dialog\";\n\nconst MODULES = [\n  ConfirmationDialogModule,\n]\n\n@NgModule({\n  imports: [\n    ...MODULES,\n  ],\n  exports: [\n    ...MODULES,\n  ],\n})\nexport class ExtraClarityLibModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ConfirmationDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfirmationDialogModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartialStringFilterModule",
            "id": "module-PartialStringFilterModule-96cd00c78499fc6e17fe80ec6fa2075a01846488f8aadd93e587b156f0aa0aef73aa0c4baabc81df8d47780ee4000737e15078c52f6eee11a4a26b5c4bbc6897",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/modules/partial-string/partial-string-filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { PartialStringFilterComponent } from './components/partial-string-filter/partial-string-filter.component';\n\n@NgModule({\n  declarations: [\n    PartialStringFilterComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClarityModule\n  ],\n  exports: [\n    PartialStringFilterComponent\n  ]\n})\nexport class PartialStringFilterModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PartialStringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PartialStringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProcessingButtonModule",
            "id": "module-ProcessingButtonModule-9e8aa74d56d8498242549dc596e63f86a58d9a9c9727c26f81505c6048144cd8bb1314a7861f5e95e63a05bffd4109a9f86f3b1aacb362727141f09698b5018c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/src/lib/modules/processing-button/processing-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProcessingButtonComponent } from './processing-button.component';\nimport {ClrLoadingButtonModule, ClrLoadingModule} from \"@clr/angular\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\n\n\n\n@NgModule({\n  declarations: [ProcessingButtonComponent],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    ClrLoadingButtonModule,\n    ClrLoadingModule,\n  ],\n  exports: [ProcessingButtonComponent],\n})\nexport class ProcessingButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProcessingButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProcessingButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/datagrid-filters/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERIOD_SEC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/src/lib/extra-clarity.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ConfirmationDialogModule,\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/auto-refresh/auto-refresh.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/processing-button/processing-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/datagrid-filters/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: ConfirmationDialogComponent\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/auto-refresh/auto-refresh.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: AutoRefreshComponent\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/processing-button/processing-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: ProcessingButtonComponent,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                "file": "projects/extra-clarity/src/lib/types/size.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "ConfirmationType",
                "childs": [
                    {
                        "name": "Cancel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Reject",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Accept",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/extra-clarity/src/lib/modules/dialog/enums/confirmation-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/datagrid-filters/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/datagrid-filters/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/datagrid-filters/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/extra-clarity/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts": [
                {
                    "name": "DEFAULT_PERIOD_SEC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                }
            ],
            "projects/extra-clarity/src/lib/extra-clarity.module.ts": [
                {
                    "name": "MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/src/lib/extra-clarity.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ConfirmationDialogModule,\n]"
                }
            ],
            "stories/confirmation-dialog/confirmation-dialog.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: ConfirmationDialogComponent\n})"
                }
            ],
            "stories/auto-refresh/auto-refresh.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/auto-refresh/auto-refresh.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/auto-refresh/auto-refresh.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: AutoRefreshComponent\n})"
                }
            ],
            "stories/processing-button/processing-button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/processing-button/processing-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/processing-button/processing-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({  }) => ({\n  props: {\n\n  },\n  component: ProcessingButtonComponent,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/extra-clarity/src/lib/modules/dialog/enums/confirmation-type.enum.ts": [
                {
                    "name": "ConfirmationType",
                    "childs": [
                        {
                            "name": "Cancel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Reject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Accept",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/extra-clarity/src/lib/modules/dialog/enums/confirmation-type.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/extra-clarity/src/lib/types/size.type.ts": [
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "file": "projects/extra-clarity/src/lib/types/size.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/datagrid-filters/src/lib/modules/enumerated-value/components/enumerated-value-filter/enumerated-value-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnumeratedValueFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/lib/modules/partial-string/components/partial-string-filter/partial-string-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartialStringFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/extra-clarity.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoRefreshComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/auto-refresh/auto-refresh.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERIOD_SEC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/dialog/containers/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/dialog/models/confirmation-dialog-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationDialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/dialog/models/dialog-button.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/dialog/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/lib/modules/processing-button/processing-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProcessingButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/auto-refresh/auto-refresh.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/auto-refresh/auto-refresh.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogStory",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/processing-button/processing-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/processing-button/processing-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
