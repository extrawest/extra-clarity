{
    "pipes": [],
    "interfaces": [
        {
            "name": "DialogButtonConfig",
            "id": "interface-DialogButtonConfig-29663b7aefadc48e57002b62330ccc739437d524d34bcd4eec4ae02d03c791162f92177463df7f2fb88a93d593805c68f71e698202e109b5f3c1f02340c4bcd0",
            "file": "projects/extra-clarity/dialog/src/models/dialog-button-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DialogButtonConfig {\n  label: string;\n  icon?: string;\n  classes?: string;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-8b5aa51a9ae7773660889d7c05bf176e483546c1a79cacc2afe3b196a80fe3a9e1cbde23e356af17ffeb2eae27e79381c713219cfb0d5773a03a64ad1e86ac9c",
            "file": "projects/extra-clarity/dialog/src/services/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "attachView",
                    "args": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "config",
                            "type": "ConfirmDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ConfirmDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ApplicationRef,\n  ComponentRef,\n  createComponent,\n  EnvironmentInjector,\n  Injectable,\n  Type\n} from '@angular/core';\nimport {ConfirmDialogConfig, DialogConfig} from \"../dialog-config\";\nimport {BaseDialogContainerComponent, ConfirmationDialogComponent} from \"../containers\";\nimport {DialogRef} from \"../dialog-ref\";\n\n@Injectable()\nexport class DialogService {\n  constructor(\n    private readonly applicationRef: ApplicationRef,\n    private readonly injector: EnvironmentInjector,\n  ) {}\n\n  public confirm(config: ConfirmDialogConfig): DialogRef {\n    return this.open(ConfirmationDialogComponent, config);\n  }\n\n  public open<T>(component: Type<T>, config?: DialogConfig): DialogRef {\n    const mergedConfig = { ...(new DialogConfig()), ...config };\n    const containerRef = this.createComponent(BaseDialogContainerComponent);\n    const containerInstance = containerRef.instance;\n    const dialogRef = new DialogRef(mergedConfig, containerRef);\n\n    containerInstance.component = component;\n    containerInstance.config = mergedConfig;\n    containerInstance.dialogRef = dialogRef;\n\n    this.attachView(containerRef);\n\n    return dialogRef;\n  }\n\n  private createComponent<T>(component: Type<T>): ComponentRef<T> {\n    return createComponent(component, {\n      environmentInjector: this.injector,\n    });\n  }\n\n  private attachView<T>(componentRef: ComponentRef<T>): void {\n    document.body.appendChild(componentRef.location.nativeElement);\n    this.applicationRef.attachView(componentRef.hostView);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "applicationRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "EnvironmentInjector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BaseDialogConfig",
            "id": "class-BaseDialogConfig-e05481cf948050c1d831a25e6999b6b2b4a2453b320444e1a30cbffb0965737dd045713f89b7292e05ab9f7583701dd5bb391248614943b561a5b991ef85f92a",
            "file": "projects/extra-clarity/dialog/src/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogButtonConfig} from \"./models/dialog-button-config.model\";\n\ntype OnClickCallback = () => (false | void | {}) | Promise<false | void | {}>;\n\nexport class BaseDialogConfig {\n  title: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  closable?: boolean = true;\n  closableBackdrop?: boolean = true;\n}\n\nexport class DialogConfig<T = any> extends BaseDialogConfig {\n  data?: T;\n}\n\nexport class ConfirmDialogConfig extends BaseDialogConfig {\n  message: string;\n  acceptBtn?: DialogButtonConfig;\n  rejectBtn?: DialogButtonConfig;\n  rejectBtnHidden?: boolean;\n  onAccept?: OnClickCallback;\n  onReject?: OnClickCallback;\n}\n",
            "properties": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "closableBackdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfirmDialogConfig",
            "id": "class-ConfirmDialogConfig-e05481cf948050c1d831a25e6999b6b2b4a2453b320444e1a30cbffb0965737dd045713f89b7292e05ab9f7583701dd5bb391248614943b561a5b991ef85f92a",
            "file": "projects/extra-clarity/dialog/src/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogButtonConfig} from \"./models/dialog-button-config.model\";\n\ntype OnClickCallback = () => (false | void | {}) | Promise<false | void | {}>;\n\nexport class BaseDialogConfig {\n  title: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  closable?: boolean = true;\n  closableBackdrop?: boolean = true;\n}\n\nexport class DialogConfig<T = any> extends BaseDialogConfig {\n  data?: T;\n}\n\nexport class ConfirmDialogConfig extends BaseDialogConfig {\n  message: string;\n  acceptBtn?: DialogButtonConfig;\n  rejectBtn?: DialogButtonConfig;\n  rejectBtnHidden?: boolean;\n  onAccept?: OnClickCallback;\n  onReject?: OnClickCallback;\n}\n",
            "properties": [
                {
                    "name": "acceptBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogButtonConfig",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "onAccept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnClickCallback",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onReject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnClickCallback",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rejectBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogButtonConfig",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "rejectBtnHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "closableBackdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseDialogConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DialogConfig",
            "id": "class-DialogConfig-e05481cf948050c1d831a25e6999b6b2b4a2453b320444e1a30cbffb0965737dd045713f89b7292e05ab9f7583701dd5bb391248614943b561a5b991ef85f92a",
            "file": "projects/extra-clarity/dialog/src/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DialogButtonConfig} from \"./models/dialog-button-config.model\";\n\ntype OnClickCallback = () => (false | void | {}) | Promise<false | void | {}>;\n\nexport class BaseDialogConfig {\n  title: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  closable?: boolean = true;\n  closableBackdrop?: boolean = true;\n}\n\nexport class DialogConfig<T = any> extends BaseDialogConfig {\n  data?: T;\n}\n\nexport class ConfirmDialogConfig extends BaseDialogConfig {\n  message: string;\n  acceptBtn?: DialogButtonConfig;\n  rejectBtn?: DialogButtonConfig;\n  rejectBtnHidden?: boolean;\n  onAccept?: OnClickCallback;\n  onReject?: OnClickCallback;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "closableBackdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseDialogConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseDialogConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DialogRef",
            "id": "class-DialogRef-2f847159959b23e8983dc67043494e7a413a8a5356ada25a2cb16ba9b474fad58b4fa1f41b31be024c1fe4330f8ddfba138831806809f1a76686e0ae64a08a13",
            "file": "projects/extra-clarity/dialog/src/dialog-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Observable, Subject } from \"rxjs\";\nimport {DialogConfig} from \"./dialog-config\";\nimport {BaseDialogContainerComponent} from \"./containers\";\nimport {ComponentRef} from \"@angular/core\";\nimport {DialogState} from \"./enums/dialog-state.enum\";\n\nexport class DialogRef<T = any> {\n  private state: DialogState = DialogState.OPEN;\n  private afterClosed$: Subject<T | undefined> = new Subject();\n\n  constructor(\n    private readonly config: DialogConfig,\n    private readonly containerRef: ComponentRef<BaseDialogContainerComponent>,\n  ) {}\n\n  public afterClosed(): Observable<T | undefined> {\n    return this.afterClosed$.asObservable();\n  }\n\n  close(result?: T): void {\n    if (this.state !== DialogState.OPEN) {\n      return;\n    }\n\n    this.containerRef.destroy();\n    this.afterClosed$.next(result);\n    this.state = DialogState.CLOSED;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "containerRef",
                        "type": "ComponentRef<BaseDialogContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "containerRef",
                        "type": "ComponentRef<BaseDialogContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "afterClosed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<T | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "DialogState.OPEN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogState",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T | undefined>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AutoRefreshComponent",
            "id": "component-AutoRefreshComponent-45d9f2c152786f4436a56ad2b5c93a1e12c30636f6917019ea47781c235d7719a1244481c20f3993f100807fde410b64ffd74162a4bab2f38b41f4a82536a430",
            "file": "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ew-auto-refresh",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auto-refresh.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "refreshing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "refresh",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "period$",
                    "defaultValue": "new BehaviorSubject(DEFAULT_PERIOD_SEC)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "time$",
                    "defaultValue": "this.timer$\n    .pipe(\n      withLatestFrom(this.period$),\n      takeUntil(this.destroy$),\n      map(([seconds, period]) => period - seconds),\n      takeWhile((seconds) => seconds > 0 && !this.refreshing),\n      finalize(() => this.refresh.emit()),\n      repeat(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "timer$",
                    "defaultValue": "timer(0, 1000)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "toggleControl",
                    "defaultValue": "new FormControl<boolean>(false, { nonNullable: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\nimport {\n  BehaviorSubject,\n  finalize,\n  map,\n  Observable,\n  repeat,\n  Subject,\n  takeUntil, takeWhile,\n  timer, withLatestFrom\n} from \"rxjs\";\nimport {FormControl} from \"@angular/forms\";\n\nconst DEFAULT_PERIOD_SEC = 60;\n\n@Component({\n  selector: 'ew-auto-refresh',\n  templateUrl: './auto-refresh.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutoRefreshComponent implements OnDestroy {\n  @Input() public refreshing: boolean;\n  @Input() public set period(v: number) {\n    if (v > 0) {\n      this.period$.next(v);\n    }\n  }\n  @Input() public set disabled(v: boolean) {\n    this.toggleControl.patchValue(!v);\n  }\n\n  @Output() public refresh = new EventEmitter<void>();\n  @Output() public toggle = new EventEmitter<boolean>();\n\n  public readonly toggleControl = new FormControl<boolean>(false, { nonNullable: true });\n\n  private readonly timer$: Observable<number> = timer(0, 1000);\n  private readonly period$: BehaviorSubject<number> = new BehaviorSubject(DEFAULT_PERIOD_SEC);\n  private readonly destroy$: Subject<void> = new Subject();\n\n  public readonly time$: Observable<number> = this.timer$\n    .pipe(\n      withLatestFrom(this.period$),\n      takeUntil(this.destroy$),\n      map(([seconds, period]) => period - seconds),\n      takeWhile((seconds) => seconds > 0 && !this.refreshing),\n      finalize(() => this.refresh.emit()),\n      repeat(),\n    )\n\n  public ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  public onToggle(): void {\n    this.toggle.emit(this.toggleControl.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "period": {
                    "name": "period",
                    "setSignature": {
                        "name": "period",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<clr-toggle-container>\n  <clr-toggle-wrapper>\n    <input\n      type=\"checkbox\"\n      clrToggle\n      [formControl]=\"toggleControl\"\n      (change)=\"onToggle()\"\n    >\n    <label class=\"p5 text-label\">\n      <ng-container *ngIf=\"!toggleControl.value; else timer\">\n        Auto refresh disabled\n      </ng-container>\n\n      <ng-template #timer>\n        <ng-container *ngIf=\"!refreshing && (time$ | async) as time; else refresh\">\n          Auto refresh in {{ time }} sec\n        </ng-container>\n\n        <ng-template #refresh>\n          Refreshing...\n        </ng-template>\n      </ng-template>\n    </label>\n  </clr-toggle-wrapper>\n</clr-toggle-container>\n"
        },
        {
            "name": "BaseDialogContainerComponent",
            "id": "component-BaseDialogContainerComponent-00196736f0a96578c10516e4ed970608a93c23153d1db2a509be794fe9823265d732e2fd77d7bae71f096e2e33371aec4eaca20d77aaf0adfb801c00bcfcee74",
            "file": "projects/extra-clarity/dialog/src/containers/base-dialog-container/base-dialog-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<clr-modal\n  [clrModalOpen]=\"true\"\n  [clrModalClosable]=\"config.closable!\"\n  [clrModalStaticBackdrop]=\"!config.closableBackdrop!\"\n  [clrModalSize]=\"config.size!\"\n  (clrModalOpenChange)=\"onClose()\"\n>\n  <div class=\"modal-title\">\n    {{ config.title }}\n  </div>\n\n  <div class=\"modal-body\">\n    <ng-container\n      [ngComponentOutlet]=\"component\"\n      [ngComponentOutletInjector]=\"childComponentInjector\"\n    ></ng-container>\n  </div>\n</clr-modal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "childComponentInjector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createChildInjector",
                    "args": [],
                    "optional": false,
                    "returnType": "Injector",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Injector, OnInit, Type} from '@angular/core';\nimport {DIALOG_DATA} from \"../../tokens/dialog-data.token\";\nimport {DialogConfig} from \"../../dialog-config\";\nimport {DialogRef} from \"../../dialog-ref\";\nimport {DIALOG_CONFIG} from \"../../tokens/dialog-config.token\";\n\n@Component({\n  template: `\n    <clr-modal\n      [clrModalOpen]=\"true\"\n      [clrModalClosable]=\"config.closable!\"\n      [clrModalStaticBackdrop]=\"!config.closableBackdrop!\"\n      [clrModalSize]=\"config.size!\"\n      (clrModalOpenChange)=\"onClose()\"\n    >\n      <div class=\"modal-title\">\n        {{ config.title }}\n      </div>\n\n      <div class=\"modal-body\">\n        <ng-container\n          [ngComponentOutlet]=\"component\"\n          [ngComponentOutletInjector]=\"childComponentInjector\"\n        ></ng-container>\n      </div>\n    </clr-modal>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BaseDialogContainerComponent implements OnInit {\n  public component: Type<any>;\n  public dialogRef: DialogRef;\n  public config: DialogConfig;\n  public childComponentInjector: Injector;\n\n  constructor(private readonly injector: Injector) {}\n\n  public ngOnInit(): void {\n    this.childComponentInjector = this.createChildInjector();\n  }\n\n  public onClose(): void {\n    this.dialogRef.close();\n  }\n\n  private createChildInjector(): Injector {\n    return Injector.create({\n      providers: [\n        { provide: DIALOG_DATA, useValue: this.config.data },\n        { provide: DIALOG_CONFIG, useValue: this.config },\n        { provide: DialogRef, useValue: this.dialogRef },\n      ],\n      parent: this.injector,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-5f3d6746674ce0e3f7f5fb0944e6e6116c78071f7a49046989c7da9e1be7874f552d92117b791992397a189ec769d23960018d2ec36f97ad3420956795a52d2e",
            "file": "stories/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DialogService"
                }
            ],
            "selector": "storybook-confirmation-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  (click)=\"onOpen()\"\n  class=\"btn btn-primary\"\n  type=\"button\"\n>\n  Open confirmation dialog\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ConfirmDialogConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ConfirmationType, ConfirmDialogConfig, DialogService} from \"@extrawest/extra-clarity/dialog\";\nimport {filter} from \"rxjs\";\n\n@Component({\n  selector: 'storybook-confirmation-dialog',\n  template: `\n    <button\n      (click)=\"onOpen()\"\n      class=\"btn btn-primary\"\n      type=\"button\"\n    >\n      Open confirmation dialog\n    </button>\n  `,\n  providers: [DialogService],\n})\nexport class ConfirmationDialogComponent {\n  @Input() config: ConfirmDialogConfig;\n\n  constructor(private readonly dialogService: DialogService) {\n  }\n\n  onOpen(): void {\n    this.dialogService.confirm({\n      ...this.config,\n    })\n      .afterClosed()\n      .pipe(filter((v) => !!v))\n      .subscribe((v: ConfirmationType) => {\n        const message = {\n          [ConfirmationType.Accept]: 'accepted',\n          [ConfirmationType.Reject]: 'rejected',\n        }[v];\n\n        alert(message);\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-276bc24361c3e6ca6bb666c8cc785d7468921956e216e226ac068ac032a81c961048c1edbc012dceceadf18c6866175cb2b6f4e9bab8c46616cf49d2953bf264-1",
            "file": "projects/extra-clarity/dialog/src/containers/confirmation-dialog/confirmation-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "DIALOG_CONFIG"
                        }
                    ],
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAccept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onReject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "trigger",
                    "args": [
                        {
                            "name": "action",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ConfirmationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {ConfirmationType} from \"../../enums/confirmation-type.enum\";\nimport {ConfirmDialogConfig} from \"../../dialog-config\";\nimport {DialogRef} from \"../../dialog-ref\";\nimport {DIALOG_CONFIG} from \"../../tokens/dialog-config.token\";\nimport {isPromise} from \"rxjs/internal/util/isPromise\";\n\n@Component({\n  templateUrl: './confirmation-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmationDialogComponent {\n  constructor(\n    @Inject(DIALOG_CONFIG) public readonly config: ConfirmDialogConfig,\n    private readonly dialogRef: DialogRef,\n  ) {}\n\n  public onReject(): void {\n    this.trigger(ConfirmationType.Reject);\n  }\n\n  public onAccept(): void {\n    this.trigger(ConfirmationType.Accept);\n  }\n\n  private async trigger(action: ConfirmationType): Promise<void> {\n    const trigger = {\n      [ConfirmationType.Accept]: this.config.onAccept,\n      [ConfirmationType.Reject]: this.config.onReject,\n    }[action];\n\n    if (typeof trigger === 'function') {\n      const result = trigger();\n\n      if (isPromise(result)) {\n        await result;\n      }\n    }\n\n    this.close(action);\n  }\n\n  private close(result: ConfirmationType): void {\n    this.dialogRef.close(result);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfirmDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfirmDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfirmationDialogComponent-1",
            "templateData": "<p>{{ config.message }}</p>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.rejectBtnHidden\"\n    type=\"button\"\n    class=\"btn btn-outline\"\n    [ngClass]=\"config.rejectBtn?.classes\"\n    (click)=\"onReject()\"\n  >\n    {{ config.rejectBtn?.label || 'Cancel' }}\n  </button>\n\n  <button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"config.acceptBtn?.classes\"\n    (click)=\"onAccept()\"\n  >\n    {{ config.acceptBtn?.label || 'Ok' }}\n  </button>\n</div>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-0483bb2fe1e7bee918ba678b4fc7d2769fbfb1d4e0e84fc8dd72d6619067bd68d4b946977326cd772c5b055171277e10792da979d069f71301b3e0d82e38596f",
            "file": "stories/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DialogService"
                }
            ],
            "selector": "storybook-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n  (click)=\"onOpen()\"\n  class=\"btn btn-primary\"\n  type=\"button\"\n>\n  Open dialog\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "DialogConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {FormDialogComponent} from \"./form-dialog/form-dialog.component\";\nimport {DialogConfig, DialogService} from \"@extrawest/extra-clarity/dialog\";\n\n@Component({\n  selector: 'storybook-dialog',\n  template: `\n    <button\n      (click)=\"onOpen()\"\n      class=\"btn btn-primary\"\n      type=\"button\"\n    >\n      Open dialog\n    </button>\n  `,\n  providers: [DialogService],\n})\nexport class DialogComponent {\n  @Input() config: DialogConfig;\n\n  constructor(private readonly dialogService: DialogService) {}\n\n  public onOpen(): void {\n    this.dialogService.open(FormDialogComponent, {\n      ...this.config,\n    })\n      .afterClosed()\n      .subscribe((v) => console.log(v));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EnumeratedValueFilterComponent",
            "id": "component-EnumeratedValueFilterComponent-bfc8edc5344470a08aade4e4fc2ab448046dc7aafcd4d868feaae92a6ff76317989460d4eceaccc56c8943be03818c5e1de1eec8ab90a11e2d4353eaa011c371",
            "file": "projects/datagrid-filters/src/lib/modules/enumerated-value/components/enumerated-value-filter/enumerated-value-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enumerated-value-filter",
            "styleUrls": [],
            "styles": [
                ":host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }"
            ],
            "templateUrl": [
                "./enumerated-value-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "debounceValue",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "exclusive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "propertyDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#changes",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#exclusive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accepts",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, OnDestroy } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { ClrDatagridFilterInterface } from '@clr/angular';\nimport { debounceTime, Subject, takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-enumerated-value-filter',\n  templateUrl: './enumerated-value-filter.component.html',\n  styles: [\n    `:host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }`\n  ]\n})\nexport class EnumeratedValueFilterComponent<T> implements ClrDatagridFilterInterface<T>, OnDestroy {\n\n  @Input() debounceValue = 300;\n  @Input() values: readonly (string | number | symbol)[] = [];\n  @Input() propertyKey?: string;\n  @Input() propertyDisplayName?: string;\n\n  #exclusive = false;\n  @Input()\n  set exclusive(value: boolean) {\n    this.#exclusive = value;\n  }\n\n  get exclusive() {\n    return this.#exclusive;\n  }\n\n  #changes: Subject<(typeof this.values)[number]> = new Subject();\n  #deleted = new EventEmitter();\n  #form: UntypedFormGroup;\n\n  constructor() {\n    this.#form = new UntypedFormGroup({\n      'input': new UntypedFormControl('')\n    });\n\n    this.#form.get('input')?.valueChanges\n      .pipe(\n        takeUntil(this.#deleted),\n        debounceTime(this.debounceValue)\n      )\n      .subscribe(value => this.#changes.next(value));\n\n  }\n\n  ngOnDestroy(): void {\n    this.#deleted.emit();\n  }\n\n  reset() {\n    this.#form.reset();\n  }\n\n  get changes() {\n    return this.#changes.asObservable();\n  }\n\n  get form() {\n    return this.#form;\n  }\n\n  get state() {\n    return {\n      property: this.propertyKey,\n      value: this.value,\n    };\n  }\n\n  get isDirty() {\n    return this.#form.dirty;\n  }\n\n  get value() {\n    return this.#form.get('input')?.value;\n  }\n\n  isActive(): boolean {\n    return !!this.propertyKey && !!this.value;\n  }\n\n  accepts(item: T): boolean {\n\n    if (!Object(item).hasOwnProperty(this.propertyKey)) {\n      return false;\n    }\n\n    const propertyValue = item[this.propertyKey as keyof typeof item];\n    if (typeof this.value !== typeof propertyValue) {\n      return false;\n    }\n\n    return propertyValue === this.value;\n\n  }\n\n  equals(other: ClrDatagridFilterInterface<T, EnumeratedValueFilterComponent<T>['state']>): boolean {\n    if (!other) {\n      return false;\n    }\n\n    return this.state?.property === other.state?.property\n      && this.state.value === other.state?.value;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host ::ng-deep .p2.filter-title {\n      margin-top: 0;\n    }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "ClrDatagridFilterInterface",
                "OnDestroy"
            ],
            "accessors": {
                "exclusive": {
                    "name": "exclusive",
                    "setSignature": {
                        "name": "exclusive",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "exclusive",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "changes": {
                    "name": "changes",
                    "getSignature": {
                        "name": "changes",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                },
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            },
            "templateData": "<h3 class=\"p2 filter-title\">Filter by {{ propertyDisplayName }}</h3>\n<form [formGroup]=\"form\">\n  <clr-radio-wrapper *ngFor=\"let value of values\">\n    <input type=\"radio\" clrRadio [value]=\"value\" formControlName=\"input\" />\n    <label>{{ value.toString() | titlecase }}</label>\n  </clr-radio-wrapper>\n  <button\n    type=\"button\"\n    class=\"btn btn-icon btn-block btn-sm\"\n    (click)=\"reset()\"\n    [disabled]=\"!isDirty\"\n  >\n    <clr-icon shape=\"refresh\"></clr-icon>\n    RESET\n  </button>\n</form>\n"
        },
        {
            "name": "FormDialogComponent",
            "id": "component-FormDialogComponent-43c2afbc2b977df00648700ac22a71a30573cabb066511a09278369d1e1e6dc285c8eb88f307905dfff4aaee859d7b52dbcaf772399d2955ee151cce71b871e4",
            "file": "stories/dialog/form-dialog/form-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<form clrForm clrLayout=\"vertical\" [formGroup]=\"exampleForm\">\n  <clr-input-container>\n    <label>Input label</label>\n    <input clrInput type=\"text\" formControlName=\"sample\" />\n    <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n    <clr-control-error>Error message that appears after focus is lost and control is invalid</clr-control-error>\n  </clr-input-container>\n\n  <button class=\"btn btn-primary\" type=\"button\" style=\"margin-top: 24px; float: right;\" (click)=\"onClose()\">Close</button>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exampleForm",
                    "defaultValue": "new FormGroup({\n    sample: new FormControl('', Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {ClarityModule, ClrInputModule} from \"@clr/angular\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {DialogRef} from \"@extrawest/extra-clarity/dialog\";\n\n@Component({\n  template: `\n    <form clrForm clrLayout=\"vertical\" [formGroup]=\"exampleForm\">\n      <clr-input-container>\n        <label>Input label</label>\n        <input clrInput type=\"text\" formControlName=\"sample\" />\n        <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n        <clr-control-error>Error message that appears after focus is lost and control is invalid</clr-control-error>\n      </clr-input-container>\n\n      <button class=\"btn btn-primary\" type=\"button\" style=\"margin-top: 24px; float: right;\" (click)=\"onClose()\">Close</button>\n    </form>\n  `,\n  imports: [ClrInputModule, ClarityModule]\n})\nexport class FormDialogComponent {\n  exampleForm = new FormGroup({\n    sample: new FormControl('', Validators.required),\n  });\n\n  constructor(\n    private readonly dialogRef: DialogRef,\n  ) {}\n\n  onClose(): void {\n    this.dialogRef.close(this.exampleForm);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PartialStringFilterComponent",
            "id": "component-PartialStringFilterComponent-72d868c6476624b8ac037651b16d8c39dbb53f9627b38b0b2d65b7071b75bb14b0148c919e28b434ac5c825a481f49f37a499ba39177449a6b31502f8c70101d",
            "file": "projects/datagrid-filters/src/lib/modules/partial-string/components/partial-string-filter/partial-string-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-partial-string-filter",
            "styleUrls": [],
            "styles": [
                ":host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }",
                ":host ::ng-deep .clr-control-container {\n      width: 100%;\n    }",
                ":host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }",
                ":host ::ng-deep input {\n      width: 100%;\n    }"
            ],
            "templateUrl": [
                "./partial-string-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "characterLimit",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "debounceValue",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Filter by string'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyDisplayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "propertyKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#changes",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accepts",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "other",
                            "type": "ClrDatagridFilterInterface<T | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup\n} from '@angular/forms';\nimport {\n  ClrDatagridFilter,\n  ClrDatagridFilterInterface,\n  ClrPopoverToggleService\n} from '@clr/angular';\nimport {\n  debounceTime,\n  Subject,\n  takeUntil\n} from 'rxjs';\n\n/* TODO: Autoreset if input length less then required */\n\n@Component({\n  selector: 'app-partial-string-filter',\n  templateUrl: './partial-string-filter.component.html',\n  styles: [\n    `:host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }`,\n    `:host ::ng-deep .clr-control-container {\n      width: 100%;\n    }`,\n    `:host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }`,\n    `:host ::ng-deep input {\n      width: 100%;\n    }`\n  ]\n})\nexport class PartialStringFilterComponent<T> implements ClrDatagridFilterInterface<T>, OnInit, OnDestroy, AfterViewInit {\n\n  @Input() characterLimit = 2;\n  @Input() debounceValue = 300;\n  @Input() placeholder = 'Filter by string';\n  @Input() propertyKey?: string;\n  @Input() propertyDisplayName?: string;\n\n  @ViewChild('input') input?: ElementRef<HTMLInputElement>;\n\n  #changes = new Subject<string>();\n  #deleted = new EventEmitter();\n  #form: UntypedFormGroup;\n\n  constructor(\n    private filterContainer: ClrDatagridFilter,\n    private smartToggleService: ClrPopoverToggleService\n  ) {\n\n    this.#form = new UntypedFormGroup({\n      'input': new UntypedFormControl('')\n    });\n\n    this.#form.get('input')?.valueChanges\n      .pipe(\n        takeUntil(this.#deleted),\n        debounceTime(this.debounceValue)\n      )\n      .subscribe(value => {\n        const isValidValue = 'string' === typeof value && value.length >= this.characterLimit;\n        if (isValidValue) {\n          this.#changes.next(value);\n        }\n      });\n\n    this.filterContainer.setFilter(this);\n  }\n\n  ngOnInit(): void {\n    if ('undefined' === typeof this.propertyDisplayName) {\n      this.propertyDisplayName = this.propertyKey;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.smartToggleService.openChange\n      .pipe(takeUntil(this.#deleted))\n      .subscribe(() => {\n        if (this.input) {\n          setTimeout(() => {\n            this.input?.nativeElement.focus();\n          });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.#deleted.emit();\n  }\n\n  isActive(): boolean {\n    return !!this.value && !!this.propertyKey;\n  }\n\n  accepts(item: T): boolean {\n\n    if (!Object(item).hasOwnProperty(this.propertyKey)) {\n      return false;\n    }\n\n    const propertyValue = item[this.propertyKey as keyof typeof item];\n    if ('string' !== typeof propertyValue) {\n      return false;\n    }\n\n    const escape = (string: string) => string.replace(\n      /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n    );\n\n    const test = new RegExp(\n      escape(this.value),\n      'i'\n    );\n\n    const match = propertyValue.match(test);\n\n    return Array.isArray(match);\n\n  }\n\n  equals(other: ClrDatagridFilterInterface<T, PartialStringFilterComponent<T>['state']>): boolean {\n    if (!other) {\n      return false;\n    }\n\n    return this.state?.property === other.state?.property\n      && this.state.value === other.state?.value;\n  }\n\n  reset() {\n    this.#form.reset();\n    this.#changes.next('');\n  }\n\n  get form() {\n    return this.#form;\n  }\n\n  get changes() {\n    return this.#changes.asObservable();\n  }\n\n  get state() {\n    return {\n      property: this.propertyKey,\n      value: this.value,\n    };\n  }\n\n  get value() {\n    return this.#form.get('input')?.value as string ?? '';\n  }\n\n  get isDirty() {\n    return this.#form.dirty;\n  }\n\n  get isToShort() {\n    return this.value.length < this.characterLimit;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host ::ng-deep .clr-form-control:first-child {\n      margin-top: 0;\n    }\n:host ::ng-deep .clr-control-container {\n      width: 100%;\n    }\n:host ::ng-deep .btn-block {\n      margin-top: 1rem;\n    }\n:host ::ng-deep input {\n      width: 100%;\n    }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filterContainer",
                        "type": "ClrDatagridFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "smartToggleService",
                        "type": "ClrPopoverToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "filterContainer",
                        "type": "ClrDatagridFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "smartToggleService",
                        "type": "ClrPopoverToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ClrDatagridFilterInterface",
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "",
                        "returnType": "",
                        "line": 150
                    }
                },
                "changes": {
                    "name": "changes",
                    "getSignature": {
                        "name": "changes",
                        "type": "",
                        "returnType": "",
                        "line": 154
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 158
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 165
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 169
                    }
                },
                "isToShort": {
                    "name": "isToShort",
                    "getSignature": {
                        "name": "isToShort",
                        "type": "",
                        "returnType": "",
                        "line": 173
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\n  <input\n    type=\"text\"\n    autocomplete=\"off\"\n    placeholder=\"{{ placeholder }}\"\n    clrInput\n    formControlName=\"input\"\n    #input\n  />\n  <clr-control-helper *ngIf=\"isToShort\">\n    Please provide at least {{ characterLimit }} characters\n  </clr-control-helper>\n  <clr-control-helper *ngIf=\"!isToShort\">\n    Searching '{{ propertyDisplayName }}' by partial match\n  </clr-control-helper>\n  <button\n    type=\"button\"\n    class=\"btn btn-icon btn-block btn-sm\"\n    (click)=\"reset()\"\n    [disabled]=\"!isDirty\"\n  >\n    <clr-icon shape=\"refresh\"></clr-icon>\n    RESET\n  </button>\n</form>\n"
        }
    ],
    "modules": [
        {
            "name": "AutoRefreshModule",
            "id": "module-AutoRefreshModule-2b493562b623108f7e310e52d05aca500c29d43f971491163540c3c043e6df763b10118d0fa575d3be3488dfa5aa725319193e385e23592ba8e7519b43918ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/auto-refresh/src/auto-refresh.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AutoRefreshComponent } from './auto-refresh.component';\nimport {ClrCheckboxModule} from \"@clr/angular\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\n@NgModule({\n  declarations: [AutoRefreshComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClrCheckboxModule,\n  ],\n  exports: [AutoRefreshComponent],\n})\nexport class AutoRefreshModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutoRefreshComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutoRefreshComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatagridFiltersModule",
            "id": "module-DatagridFiltersModule-d0f4cbfb6e3e78ddcf3b54586e3881bc3a2a6b968d920e312af60983b32677b6a024b6a492e66abc8992d77964e080b8cf0a33677354bf3be88fdf509a93694a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/datagrid-filters.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  EnumeratedValueFilterModule,\n  PartialStringFilterModule,\n} from './modules';\n\n@NgModule({\n  exports: [\n    EnumeratedValueFilterModule,\n    PartialStringFilterModule,\n  ]\n})\nexport class DatagridFiltersModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterModule"
                        },
                        {
                            "name": "PartialStringFilterModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-03fac9789b1c197ba3687b4c63b9bce4563ff3df52e11b83effab735bf9f25231c5218878fcaa63a94c2ec8979ba7bb199396e628f00f6bb54cfdb41233c1ec4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/extra-clarity/dialog/src/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ClrModalModule} from \"@clr/angular\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {DialogService} from \"./services/dialog.service\";\nimport {BaseDialogContainerComponent, ConfirmationDialogComponent} from \"./containers\";\n\n@NgModule({\n  declarations: [\n    ConfirmationDialogComponent,\n    BaseDialogContainerComponent,\n  ],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    ClrModalModule,\n  ],\n  providers: [DialogService],\n})\nexport class DialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseDialogContainerComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EnumeratedValueFilterModule",
            "id": "module-EnumeratedValueFilterModule-94685e4e48398b745c39ce0adb0decff900483b0350ad3266b02ffb81cd515372a215123147e4b1a4e0a2a569fccfcfce656f57c2d7192eabddebcd00f057cc3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/modules/enumerated-value/enumerated-value-filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { EnumeratedValueFilterComponent } from './components/enumerated-value-filter/enumerated-value-filter.component';\n\n@NgModule({\n  declarations: [\n    EnumeratedValueFilterComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClarityModule\n  ],\n  exports: [\n    EnumeratedValueFilterComponent\n  ]\n})\nexport class EnumeratedValueFilterModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EnumeratedValueFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormDialogModule",
            "id": "module-FormDialogModule-974b2542cd2a5dc16e22b4c755aead52d0d467af9f6b2d4199ce4a6d5603383373c3630585113395c94fafd06fcb2520f10c434af9b544452d1e4e843648521b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/dialog/form-dialog/form-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormDialogComponent} from \"./form-dialog.component\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {ClarityModule} from \"@clr/angular\";\n\n@NgModule({\n  declarations: [FormDialogComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClarityModule,\n  ],\n})\nexport class FormDialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PartialStringFilterModule",
            "id": "module-PartialStringFilterModule-96cd00c78499fc6e17fe80ec6fa2075a01846488f8aadd93e587b156f0aa0aef73aa0c4baabc81df8d47780ee4000737e15078c52f6eee11a4a26b5c4bbc6897",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/datagrid-filters/src/lib/modules/partial-string/partial-string-filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { PartialStringFilterComponent } from './components/partial-string-filter/partial-string-filter.component';\n\n@NgModule({\n  declarations: [\n    PartialStringFilterComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ClarityModule\n  ],\n  exports: [\n    PartialStringFilterComponent\n  ]\n})\nexport class PartialStringFilterModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PartialStringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PartialStringFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/datagrid-filters/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERIOD_SEC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "defaultParameters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/auto-refresh/auto-refresh.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters",
                "defaultValue": "{\n  title: 'Auto refresh',\n  args: {\n    period: 60,\n    refreshing: false,\n    disabled: false,\n  },\n}"
            },
            {
                "name": "defaultParameters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters",
                "defaultValue": "{\n  title: 'Dialog/Confirmation Dialog',\n  argTypes: {\n    size: { defaultValue: 'md', control: { type: 'radio', options: ['sm', 'md', 'lg', 'xl'] } },\n  },\n  args: {\n    title: 'Title',\n    message: 'Test confirmation dialog message...',\n    closable: true,\n    closableBackdrop: true,\n    rejectBtnHidden: false,\n    rejectBtn: {\n      label: 'Reject',\n      icon: '',\n      classes: 'btn-secondary',\n    },\n    acceptBtn: {\n      label: 'Accept',\n      icon: '',\n      classes: 'btn-primary',\n    },\n  },\n}"
            },
            {
                "name": "defaultParameters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters",
                "defaultValue": "{\n  title: 'Dialog/Dialog',\n  argTypes: {\n    size: { defaultValue: 'md', control: { type: 'radio', options: ['sm', 'md', 'lg', 'xl'] } },\n  },\n  args: {\n    title: 'Title',\n    closable: true,\n    closableBackdrop: true,\n  },\n}"
            },
            {
                "name": "defaultStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/auto-refresh/auto-refresh.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  template: `<ew-auto-refresh\n    [period]=\"period\"\n    [refreshing]=\"refreshing\"\n    [disabled]=\"disabled\"\n  ></ew-auto-refresh>`,\n  props: {\n    ...args,\n  },\n})"
            },
            {
                "name": "defaultStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  template: `<storybook-confirmation-dialog [config]=\"config\"></storybook-confirmation-dialog>`,\n  moduleMetadata: {\n    declarations: [ConfirmationDialogComponent],\n  },\n  props: {\n    config: {\n      ...args,\n    },\n  },\n})"
            },
            {
                "name": "defaultStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  template: `<storybook-dialog [config]=\"config\"></storybook-dialog>`,\n  moduleMetadata: {\n    declarations: [DialogComponent],\n    imports: [FormDialogModule],\n  },\n  props: {\n    config: {\n      ...args,\n    },\n  },\n})"
            },
            {
                "name": "DIALOG_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/dialog/src/tokens/dialog-config.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('DialogConfig')"
            },
            {
                "name": "DIALOG_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/extra-clarity/dialog/src/tokens/dialog-data.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('DialogData')"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/datagrid-filters/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/auto-refresh/auto-refresh.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters[]",
                "defaultValue": "[]"
            },
            {
                "name": "variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters[]",
                "defaultValue": "[]"
            },
            {
                "name": "variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Parameters[]",
                "defaultValue": "[]"
            }
        ],
        "functions": [
            {
                "name": "combineStories",
                "file": ".storybook/helpers/setup-story.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "defaultStory",
                        "type": "Story",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "variants",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Story",
                "jsdoctags": [
                    {
                        "name": "defaultStory",
                        "type": "Story",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "variants",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setupStory",
                "file": ".storybook/helpers/setup-story.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ngModules",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultStory",
                        "type": "Story",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultParameters",
                        "type": "Parameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "variants",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ngModules",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultStory",
                        "type": "Story",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultParameters",
                        "type": "Parameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "variants",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "wrapTemplate",
                "file": ".storybook/helpers/setup-story.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true
                    },
                    {
                        "name": "variantIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "variantIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "OnClickCallback",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/extra-clarity/dialog/src/dialog-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "ConfirmationType",
                "childs": [
                    {
                        "name": "Reject",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Accept",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/extra-clarity/dialog/src/enums/confirmation-type.enum.ts"
            },
            {
                "name": "DialogState",
                "childs": [
                    {
                        "name": "OPEN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CLOSED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/extra-clarity/dialog/src/enums/dialog-state.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/datagrid-filters/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/datagrid-filters/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/datagrid-filters/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts": [
                {
                    "name": "DEFAULT_PERIOD_SEC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                }
            ],
            "stories/auto-refresh/auto-refresh.stories.ts": [
                {
                    "name": "defaultParameters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/auto-refresh/auto-refresh.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters",
                    "defaultValue": "{\n  title: 'Auto refresh',\n  args: {\n    period: 60,\n    refreshing: false,\n    disabled: false,\n  },\n}"
                },
                {
                    "name": "defaultStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/auto-refresh/auto-refresh.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  template: `<ew-auto-refresh\n    [period]=\"period\"\n    [refreshing]=\"refreshing\"\n    [disabled]=\"disabled\"\n  ></ew-auto-refresh>`,\n  props: {\n    ...args,\n  },\n})"
                },
                {
                    "name": "variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/auto-refresh/auto-refresh.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters[]",
                    "defaultValue": "[]"
                }
            ],
            "stories/confirmation-dialog/confirmation-dialog.stories.ts": [
                {
                    "name": "defaultParameters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters",
                    "defaultValue": "{\n  title: 'Dialog/Confirmation Dialog',\n  argTypes: {\n    size: { defaultValue: 'md', control: { type: 'radio', options: ['sm', 'md', 'lg', 'xl'] } },\n  },\n  args: {\n    title: 'Title',\n    message: 'Test confirmation dialog message...',\n    closable: true,\n    closableBackdrop: true,\n    rejectBtnHidden: false,\n    rejectBtn: {\n      label: 'Reject',\n      icon: '',\n      classes: 'btn-secondary',\n    },\n    acceptBtn: {\n      label: 'Accept',\n      icon: '',\n      classes: 'btn-primary',\n    },\n  },\n}"
                },
                {
                    "name": "defaultStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  template: `<storybook-confirmation-dialog [config]=\"config\"></storybook-confirmation-dialog>`,\n  moduleMetadata: {\n    declarations: [ConfirmationDialogComponent],\n  },\n  props: {\n    config: {\n      ...args,\n    },\n  },\n})"
                },
                {
                    "name": "variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters[]",
                    "defaultValue": "[]"
                }
            ],
            "stories/dialog/dialog.stories.ts": [
                {
                    "name": "defaultParameters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters",
                    "defaultValue": "{\n  title: 'Dialog/Dialog',\n  argTypes: {\n    size: { defaultValue: 'md', control: { type: 'radio', options: ['sm', 'md', 'lg', 'xl'] } },\n  },\n  args: {\n    title: 'Title',\n    closable: true,\n    closableBackdrop: true,\n  },\n}"
                },
                {
                    "name": "defaultStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  template: `<storybook-dialog [config]=\"config\"></storybook-dialog>`,\n  moduleMetadata: {\n    declarations: [DialogComponent],\n    imports: [FormDialogModule],\n  },\n  props: {\n    config: {\n      ...args,\n    },\n  },\n})"
                },
                {
                    "name": "variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Parameters[]",
                    "defaultValue": "[]"
                }
            ],
            "projects/extra-clarity/dialog/src/tokens/dialog-config.token.ts": [
                {
                    "name": "DIALOG_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/dialog/src/tokens/dialog-config.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('DialogConfig')"
                }
            ],
            "projects/extra-clarity/dialog/src/tokens/dialog-data.token.ts": [
                {
                    "name": "DIALOG_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/extra-clarity/dialog/src/tokens/dialog-data.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('DialogData')"
                }
            ]
        },
        "groupedFunctions": {
            ".storybook/helpers/setup-story.helper.ts": [
                {
                    "name": "combineStories",
                    "file": ".storybook/helpers/setup-story.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "defaultStory",
                            "type": "Story",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variants",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Story",
                    "jsdoctags": [
                        {
                            "name": "defaultStory",
                            "type": "Story",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variants",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupStory",
                    "file": ".storybook/helpers/setup-story.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ngModules",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultStory",
                            "type": "Story",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultParameters",
                            "type": "Parameters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variants",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ngModules",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultStory",
                            "type": "Story",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultParameters",
                            "type": "Parameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variants",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wrapTemplate",
                    "file": ".storybook/helpers/setup-story.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "template",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true
                        },
                        {
                            "name": "variantIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variantIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "1e3552e7-1677-4e7c-aa68-f6b75c069c12",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/extra-clarity/dialog/src/enums/confirmation-type.enum.ts": [
                {
                    "name": "ConfirmationType",
                    "childs": [
                        {
                            "name": "Reject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Accept",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/extra-clarity/dialog/src/enums/confirmation-type.enum.ts"
                }
            ],
            "projects/extra-clarity/dialog/src/enums/dialog-state.enum.ts": [
                {
                    "name": "DialogState",
                    "childs": [
                        {
                            "name": "OPEN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CLOSED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/extra-clarity/dialog/src/enums/dialog-state.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/extra-clarity/dialog/src/dialog-config.ts": [
                {
                    "name": "OnClickCallback",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/extra-clarity/dialog/src/dialog-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/helpers/setup-story.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "combineStories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/helpers/setup-story.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setupStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/helpers/setup-story.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "wrapTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/lib/modules/enumerated-value/components/enumerated-value-filter/enumerated-value-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnumeratedValueFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/lib/modules/partial-string/components/partial-string-filter/partial-string-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartialStringFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/datagrid-filters/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoRefreshComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/auto-refresh/src/auto-refresh.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERIOD_SEC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/containers/base-dialog-container/base-dialog-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseDialogContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/containers/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/dialog-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseDialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/dialog-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfirmDialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/dialog-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/dialog-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/models/dialog-button-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogButtonConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/tokens/dialog-config.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/extra-clarity/dialog/src/tokens/dialog-data.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/auto-refresh/auto-refresh.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultParameters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/auto-refresh/auto-refresh.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/auto-refresh/auto-refresh.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultParameters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultParameters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/dialog/form-dialog/form-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}